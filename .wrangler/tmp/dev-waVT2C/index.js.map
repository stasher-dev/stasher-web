{
  "version": 3,
  "sources": ["../bundle-8RIbz2/checked-fetch.js", "../../../src/index.js", "../../../../../.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-8RIbz2/middleware-insertion-facade.js", "../../../../../.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/common.ts", "../bundle-8RIbz2/middleware-loader.entry.ts"],
  "sourceRoot": "/home/johnny/stashed/stasher-web/.wrangler/tmp/dev-waVT2C",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "/**\n * Stasher Web Worker - Crypto tool interface\n * Serves secure popup for enstash/destash/unstash operations\n */\n\n\n// Embed the popup HTML content\nconst POPUP_CONTENT = `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Stasher</title>\n    <style>\n        body {\n            font-family: 'Fira Code', 'Monaco', 'Consolas', monospace;\n            margin: 0;\n            padding: 24px;\n            padding-top: 80px;\n            background: #1e1e1e;\n            color: #cccccc;\n            overflow: hidden;\n        }\n        \n        .branding {\n            position: absolute;\n            top: 16px;\n            left: 12px;\n            color: #00bfff;\n            font-size: 36px;\n            font-weight: bold;\n        }\n        \n        .version {\n            position: absolute;\n            bottom: 16px;\n            left: 12px;\n            color: #565656;\n            font-size: 12px;\n        }\n        \n        .operations {\n            margin-top: 8px;\n            padding: 0 12px;\n        }\n        \n        .button-group {\n            display: flex;\n            gap: 0px;\n            justify-content: flex-end;\n        }\n        \n        .operation {\n            background: none;\n            border: none;\n            font-family: inherit;\n            font-size: 18px;\n            font-weight: normal;\n            cursor: pointer;\n            padding: 12px 24px;\n            border-radius: 4px;\n            transition: all 0.2s ease;\n            text-transform: lowercase;\n        }\n        \n        .operation.enstash {\n            color: #90ee90;\n        }\n        \n        .operation.destash {\n            color: #daa520;\n        }\n        \n        .operation.unstash {\n            color: #cd5c5c;\n        }\n        \n        \n        .operation:hover {\n            opacity: 0.8;\n        }\n        \n        .operation:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n        }\n        \n        .input-section {\n            margin-bottom: 24px;\n            padding: 0 12px;\n            position: relative;\n        }\n        \n        .clear-section {\n            display: flex;\n            justify-content: flex-end;\n            margin-bottom: 16px;\n            padding: 0 12px;\n        }\n        \n        .clear-button {\n            background: none;\n            border: none;\n            color: #969696;\n            font-family: inherit;\n            font-size: 10px;\n            cursor: pointer;\n            padding: 4px 8px 16px 8px;\n            transition: all 0.2s ease;\n        }\n        \n        .clear-button:hover {\n            opacity: 0.8;\n        }\n        \n        .clear-button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n        }\n        \n        \n        .input {\n            width: calc(100% - 32px);\n            background: #2d2d30;\n            border: 1px solid #3e3e42;\n            border-radius: 6px;\n            padding: 14px 16px;\n            color: #cccccc;\n            font-family: inherit;\n            font-size: 14px;\n            resize: none;\n            min-height: 20px;\n            max-height: 20px;\n            overflow: hidden;\n            text-align: left;\n            box-shadow: inset 0 1px 3px rgba(0,0,0,0.3);\n        }\n        \n        .input:focus {\n            outline: none;\n            border-color: #00bfff;\n            box-shadow: 0 0 0 2px rgba(0, 191, 255, 0.2), inset 0 1px 3px rgba(0,0,0,0.3);\n        }\n        \n        .input::placeholder {\n            color: #565656;\n        }\n        \n        .message {\n            margin-top: 16px;\n            font-size: 12px;\n            color: #565656;\n            text-align: left;\n            min-height: 16px;\n        }\n        \n        .message.success {\n            color: #90ee90;\n        }\n        \n        .message.error {\n            color: #cd5c5c;\n        }\n        \n    </style>\n</head>\n<body>\n    <div class=\"branding\">stasher</div>\n    \n    <div class=\"clear-section\">\n        <button class=\"clear-button\" id=\"clear-button\">clear</button>\n    </div>\n    \n    <div class=\"input-section\">\n        <input type=\"text\" class=\"input\" id=\"main-input\" placeholder=\"enter secret, token, or uuid\" autocomplete=\"off\" autocapitalize=\"off\" autocorrect=\"off\" spellcheck=\"false\">\n        <div class=\"message\" id=\"message\"></div>\n    </div>\n    \n    <div class=\"operations\">\n        <div class=\"button-group\">\n            <button class=\"operation enstash\" data-mode=\"enstash\">enstash</button>\n            <button class=\"operation destash\" data-mode=\"destash\">destash</button>\n            <button class=\"operation unstash\" data-mode=\"unstash\">unstash</button>\n        </div>\n    </div>\n    \n    <div class=\"version\">v1.0</div>\n    \n    <script>\n        // Constants (from CLI constants.ts)\n        const MAX_SECRET_LENGTH = 4096; // 4KB plaintext\n        const DEFAULT_API_BASE_URL = Object.freeze('https://api.stasher.dev'); // Prevent accidental override\n        const KEY_LENGTH = 32; // 256-bit key\n        const IV_LENGTH = 12; // 96-bit IV for GCM\n        const TAG_LENGTH = 16; // 128-bit auth tag\n\n        // UUID v4 validation regex (same as CLI)\n        const UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n\n        // Utility functions\n        function randomBytes(length) {\n            return crypto.getRandomValues(new Uint8Array(length));\n        }\n\n        function arrayBufferToBase64(buffer) {\n            const bytes = new Uint8Array(buffer);\n            let binary = '';\n            for (let i = 0; i < bytes.byteLength; i++) {\n                binary += String.fromCharCode(bytes[i]);\n            }\n            return btoa(binary);\n        }\n\n        function base64ToArrayBuffer(base64) {\n            try {\n                const binary = atob(base64);\n                const bytes = new Uint8Array(binary.length);\n                for (let i = 0; i < binary.length; i++) {\n                    bytes[i] = binary.charCodeAt(i);\n                }\n                return bytes.buffer;\n            } catch {\n                throw new Error(\"Invalid base64 input\");\n            }\n        }\n\n        function formatStashToken(id, keyBuffer) {\n            const keyBase64 = arrayBufferToBase64(keyBuffer);\n            return \\`\\${id}:\\${keyBase64}\\`;\n        }\n\n        function decodeStashToken(token) {\n            const colonIndex = token.indexOf(':');\n            if (colonIndex === -1) {\n                throw new Error('Invalid stash token format: missing colon separator');\n            }\n            \n            const id = token.substring(0, colonIndex);\n            const keyBase64 = token.substring(colonIndex + 1);\n            const keyBuffer = base64ToArrayBuffer(keyBase64);\n            \n            return { id, keyBuffer };\n        }\n\n        async function encrypt(secret) {\n            const keyBuffer = randomBytes(KEY_LENGTH);\n            const iv = randomBytes(IV_LENGTH);\n            \n            const cryptoKey = await crypto.subtle.importKey(\n                'raw',\n                keyBuffer,\n                { name: 'AES-GCM' },\n                false,\n                ['encrypt']\n            );\n            \n            const encoder = new TextEncoder();\n            const secretBytes = encoder.encode(secret);\n            \n            const encrypted = await crypto.subtle.encrypt(\n                {\n                    name: 'AES-GCM',\n                    iv: iv,\n                    tagLength: TAG_LENGTH * 8\n                },\n                cryptoKey,\n                secretBytes\n            );\n            \n            const encryptedArray = new Uint8Array(encrypted);\n            const ciphertext = encryptedArray.slice(0, -TAG_LENGTH);\n            const tag = encryptedArray.slice(-TAG_LENGTH);\n            \n            return {\n                keyBuffer,\n                iv,\n                ciphertext,\n                tag\n            };\n        }\n\n        async function decrypt(payload, keyBuffer) {\n            const iv = base64ToArrayBuffer(payload.iv);\n            const tag = base64ToArrayBuffer(payload.tag);\n            const ciphertext = base64ToArrayBuffer(payload.ciphertext);\n            \n            if (iv.byteLength !== IV_LENGTH) {\n                throw new Error(\\`Invalid IV length: must be \\${IV_LENGTH} bytes\\`);\n            }\n            if (tag.byteLength !== TAG_LENGTH) {\n                throw new Error(\\`Invalid auth tag length: must be \\${TAG_LENGTH} bytes\\`);\n            }\n            if (keyBuffer.byteLength !== KEY_LENGTH) {\n                throw new Error(\\`Invalid key length: must be \\${KEY_LENGTH} bytes\\`);\n            }\n            \n            const cryptoKey = await crypto.subtle.importKey(\n                'raw',\n                keyBuffer,\n                { name: 'AES-GCM' },\n                false,\n                ['decrypt']\n            );\n            \n            const encryptedData = new Uint8Array(ciphertext.byteLength + tag.byteLength);\n            encryptedData.set(new Uint8Array(ciphertext));\n            encryptedData.set(new Uint8Array(tag), ciphertext.byteLength);\n            \n            const decrypted = await crypto.subtle.decrypt(\n                {\n                    name: 'AES-GCM',\n                    iv: new Uint8Array(iv),\n                    tagLength: TAG_LENGTH * 8\n                },\n                cryptoKey,\n                encryptedData\n            );\n            \n            const decoder = new TextDecoder('utf-8');\n            return decoder.decode(decrypted);\n        }\n\n        function createPayload(encryptionResult) {\n            return {\n                iv: arrayBufferToBase64(encryptionResult.iv),\n                tag: arrayBufferToBase64(encryptionResult.tag),\n                ciphertext: arrayBufferToBase64(encryptionResult.ciphertext)\n            };\n        }\n\n        function validateSecretContent(secret) {\n            return typeof secret === 'string' && secret.trim().length > 0;\n        }\n\n        function validateSecretLength(secret, maxLength) {\n            return secret.length <= maxLength;\n        }\n\n        function validateUUID(uuid) {\n            return typeof uuid === 'string' && UUID_REGEX.test(uuid);\n        }\n\n        async function performEnstash(secret) {\n            if (!validateSecretContent(secret)) {\n                throw new Error('Secret cannot be empty or whitespace only');\n            }\n            \n            if (!validateSecretLength(secret, MAX_SECRET_LENGTH)) {\n                throw new Error(\\`Secret too long (max \\${MAX_SECRET_LENGTH} characters)\\`);\n            }\n            \n            try {\n                const encryptionResult = await encrypt(secret);\n                const payload = createPayload(encryptionResult);\n                \n                const response = await fetch(\\`\\${DEFAULT_API_BASE_URL}/enstash\\`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify(payload)\n                });\n                \n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(\\`API error: \\${response.status} \\${errorText}\\`);\n                }\n                \n                const result = await response.json();\n                const token = formatStashToken(result.id, encryptionResult.keyBuffer);\n                \n                return token;\n                \n            } catch (error) {\n                console.error('Enstash failed:', error.message);\n                throw error;\n            }\n        }\n\n        async function performDestash(token) {\n            try {\n                const { id, keyBuffer } = decodeStashToken(token);\n                \n                if (!validateUUID(id)) {\n                    throw new Error('Invalid UUID format in token');\n                }\n                \n                const response = await fetch(\\`\\${DEFAULT_API_BASE_URL}/destash/\\${id}\\`, {\n                    method: 'GET'\n                });\n                \n                if (!response.ok) {\n                    if (response.status === 404) {\n                        const message = 'Stash not found';\n                        console.warn(\\`\\${message}\\`);\n                        throw new Error(message);\n                    }\n                    const errorText = await response.text();\n                    throw new Error(\\`API error: \\${response.status} \\${errorText}\\`);\n                }\n                \n                const payload = await response.json();\n                const secret = await decrypt(payload, keyBuffer);\n                \n                return secret;\n                \n            } catch (error) {\n                console.error('Destash failed:', error.message);\n                throw error;\n            }\n        }\n\n        async function performUnstash(tokenOrId) {\n            try {\n                let id;\n                if (tokenOrId.includes(':')) {\n                    const { id: extractedId } = decodeStashToken(tokenOrId);\n                    id = extractedId;\n                } else {\n                    id = tokenOrId;\n                }\n                \n                if (!validateUUID(id)) {\n                    throw new Error('Invalid UUID format');\n                }\n                \n                const response = await fetch(\\`\\${DEFAULT_API_BASE_URL}/unstash/\\${id}\\`, {\n                    method: 'DELETE'\n                });\n                \n                if (!response.ok) {\n                    if (response.status === 404) {\n                        const message = 'Stash not found (may have already been read or expired)';\n                        console.warn(\\`\\${message}\\`);\n                        throw new Error(message);\n                    }\n                    const errorText = await response.text();\n                    throw new Error(\\`API error: \\${response.status} \\${errorText}\\`);\n                }\n                \n                const result = await response.json();\n                const message = \\`Secret deleted: \\${result.id}\\`;\n                \n                return message;\n                \n            } catch (error) {\n                console.error('Unstash failed:', error.message);\n                throw error;\n            }\n        }\n        \n        // Get elements\n        const operations = document.querySelectorAll('.operation');\n        const input = document.querySelector('#main-input');\n        const message = document.querySelector('#message');\n        const clearButton = document.querySelector('#clear-button');\n        \n        // Show message\n        function showMessage(text, isError = false) {\n            message.textContent = text;\n            message.className = \\`message \\${isError ? 'error' : 'success'}\\`;\n        }\n        \n        function clearMessage() {\n            message.textContent = '';\n            message.className = 'message';\n        }\n        \n        // Handle clear button\n        clearButton.addEventListener('click', () => {\n            input.value = '';\n            clearMessage();\n        });\n        \n        // Handle operation buttons\n        operations.forEach(op => {\n            op.addEventListener('click', async () => {\n                const inputValue = input.value.trim();\n                if (!inputValue) return;\n                \n                const mode = op.dataset.mode;\n                \n                // Clear previous message\n                clearMessage();\n                \n                // Disable all buttons\n                operations.forEach(btn => btn.disabled = true);\n                clearButton.disabled = true;\n                op.textContent = 'working...';\n                \n                try {\n                    let result_text;\n                    \n                    switch(mode) {\n                        case 'enstash':\n                            result_text = await performEnstash(inputValue);\n                            input.value = result_text;\n                            showMessage('stash created');\n                            break;\n                            \n                        case 'destash':\n                            result_text = await performDestash(inputValue);\n                            input.value = result_text;\n                            showMessage('stash retrieved');\n                            break;\n                            \n                        case 'unstash':\n                            result_text = await performUnstash(inputValue);\n                            input.value = '';\n                            showMessage('stash deleted');\n                            break;\n                    }\n                    \n                } catch (error) {\n                    input.value = \\`Error: \\${error.message}\\`;\n                    showMessage(\\`\\${error.message}\\`, true);\n                } finally {\n                    // Re-enable all buttons and reset text\n                    operations.forEach((btn, idx) => {\n                        btn.disabled = false;\n                        btn.textContent = ['enstash', 'destash', 'unstash'][idx];\n                    });\n                    clearButton.disabled = false;\n                }\n            });\n        });\n        \n        // Initialize\n        input.focus();\n    </script>\n</body>\n</html>`;\n\n\n\nexport default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    \n    // Serve the crypto tool at root\n    if (url.pathname === '/') {\n      return new Response(POPUP_CONTENT, {\n        headers: {\n          'Content-Type': 'text/html; charset=utf-8',\n          'Cache-Control': 'public, max-age=3600',\n          'X-Frame-Options': 'DENY',\n          'X-Content-Type-Options': 'nosniff',\n          'Content-Security-Policy': \"default-src 'self'; script-src 'unsafe-inline'; style-src 'unsafe-inline';\"\n        }\n      });\n    }\n    \n    // 404 for everything else\n    return new Response('Not Found', { status: 404 });\n  }\n};", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/home/johnny/stashed/stasher-web/src/index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/home/johnny/.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/home/johnny/.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/home/johnny/stashed/stasher-web/src/index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/home/johnny/stashed/stasher-web/.wrangler/tmp/bundle-8RIbz2/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/home/johnny/.nvm/versions/node/v22.15.0/lib/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/home/johnny/stashed/stasher-web/.wrangler/tmp/bundle-8RIbz2/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/home/johnny/stashed/stasher-web/.wrangler/tmp/bundle-8RIbz2/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
